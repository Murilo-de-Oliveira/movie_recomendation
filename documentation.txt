Models -> Estrutura dos dados, esquema de I/O de dados, modelos do banco de dados
Routes -> Define as rotas da API
Services -> Coordena a√ß√£o de v√°rios reposit√≥rios, valida√ß√£o de regras, orquestra chamadas externas. Ex: register_user
Controllers -> Receber requisi√ß√µes tratadas do FastAPI, chamar servi√ßos, retornar a resposta com o formato correto ou erros tratados
Repositories -> Faz a query e crud no banco de dados
DB -> Camada de acesso aos bancos de dados

üß≠ 1. Rota (FastAPI Router)
Respons√°vel por:
    Receber requisi√ß√µes HTTP.
    Validar o formato dos dados com os models (Pydantic).
    Chamar o controller para processar.
    
N√£o faz:
    L√≥gica de neg√≥cio ou acesso a banco.

üß± 2. Controller (ou handler)
Respons√°vel por:
    Orquestrar a l√≥gica da rota.
    Chamar os services.
    Tratar exce√ß√µes e retornar respostas HTTP adequadas (status, mensagens).

Exemplo de erro tratado aqui:
if not user:
    raise HTTPException(status_code=404, detail="Usu√°rio n√£o encontrado")

üß† 3. Service (l√≥gica de neg√≥cio)
Respons√°vel por:
    Validar regras de neg√≥cio (ex: email √∫nico, nota entre 0‚Äì5).
    Combinar chamadas a diferentes reposit√≥rios, se necess√°rio.
    Chamar o reposit√≥rio para interagir com o banco.

üíæ 4. Repository (acesso ao banco)
Respons√°vel por:
    Executar opera√ß√µes diretamente no banco de dados (MongoDB, Neo4j, etc).
    Inserir, buscar, atualizar ou deletar registros.

N√£o faz:
    Valida√ß√µes de regra de neg√≥cio.
    Retorno HTTP ou manipula√ß√£o de erros HTTP.

üì¶ 5. Models (Pydantic + banco)
    Pydantic models: Validam a entrada e sa√≠da da API (UserCreate, UserOut etc).
    ORM/ODM models (SQLAlchemy, Mongo, etc): representam o dado no banco (opcional no Mongo, obrigat√≥rio no SQL).